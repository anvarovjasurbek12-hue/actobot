import logging
import asyncio
import os
import threading
from flask import Flask
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    ContextTypes, MessageHandler, filters
)
from config import TOKEN, WEBAPP_URL, LOG_LEVEL

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=getattr(logging, LOG_LEVEL)
)
logger = logging.getLogger(__name__)

# HTTP health server (–¥–ª—è Render/UptimeRobot)
PORT = int(os.getenv('PORT', '10000'))
_health_app = Flask(__name__)

@_health_app.get('/')
def _health_root():
    return 'OK', 200

@_health_app.get('/health')
def _health_check():
    return 'healthy', 200


def _run_health_server() -> None:
    # –í –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å Telegram polling
    _logger = logging.getLogger('health')
    _logger.info(f'Health server listening on 0.0.0.0:{PORT}')
    _health_app.run(host='0.0.0.0', port=PORT, debug=False, use_reloader=False)

# üåç –¢–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
LANGUAGES = {
    "ru": {
        "start": "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Actogram Bot!\n\n"
                "üöÄ –Ø –ø–æ–º–æ–≥—É –≤–∞–º –±—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—É –∏ –¥—Ä—É–≥–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º.\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        "menu": "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        "site": "üí¨ –û—Ç–∫—Ä—ã—Ç—å Actogram",
        "help": "‚ùì –ü–æ–º–æ—â—å",
        "choose_lang": "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "lang_changed": "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω!",
        "help_text": "ü§ñ **Actogram Bot - –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫**\n\n"
                    "üì± **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
                    "‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                    "‚Ä¢ /help - –ü–æ–º–æ—â—å\n"
                    "‚Ä¢ /menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n"
                    "‚Ä¢ /lang - –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫\n\n"
                    "üí¨ **–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä Actogram:**\n"
                    "–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—É\n\n"
                    "üåê **–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:**\n"
                    "–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–∞ —Å–∞–π—Ç–µ",
        "about": "‚ÑπÔ∏è **–û –±–æ—Ç–µ:**\n\n"
                "Actogram Bot - —ç—Ç–æ —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞—à–µ–º—É –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—É.\n\n"
                "‚ú® **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
                "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—É\n"
                "‚Ä¢ –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
                "‚Ä¢ –£–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n"
                "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º",
        "back_to_menu": "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
        "messenger_title": "üí¨ **Actogram Messenger**\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä:",
        "web_app_title": "üåê **–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Actogram**\n\n–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏:"
    },
    "uz": {
        "start": "üéâ Actogram Bot-ga xush kelibsiz!\n\n"
                "üöÄ Men sizga messenjeringiz va boshqa funksiyalarga tez kirishda yordam beraman.\n\n"
                "Harakatni tanlang:",
        "menu": "üìã Asosiy menyu",
        "site": "üí¨ Actogram-ni ochish",
        "help": "‚ùì Yordam",
        "choose_lang": "üåç Tilni tanlang:",
        "lang_changed": "‚úÖ Til o'zgartirildi!",
        "help_text": "ü§ñ **Actogram Bot - Sizning yordamchingiz**\n\n"
                    "üì± **Asosiy buyruqlar:**\n"
                    "‚Ä¢ /start - Asosiy menyu\n"
                    "‚Ä¢ /help - Yordam\n"
                    "‚Ä¢ /menu - Menyuni ko'rsatish\n"
                    "‚Ä¢ /lang - Tilni o'zgartirish\n\n"
                    "üí¨ **Actogram Messenjeri:**\n"
                    "Shaxsiy messenjeringizga tez kirish\n\n"
                    "üåê **Veb-ilova:**\n"
                    "To'liq funksiyali versiya saytda",
        "about": "‚ÑπÔ∏è **Bot haqida:**\n\n"
                "Actogram Bot - bu messenjeringizga tez kirish uchun aqlli yordamchi.\n\n"
                "‚ú® **Imkoniyatlar:**\n"
                "‚Ä¢ Messenjerga tez kirish\n"
                "‚Ä¢ Ko'p tilli qo'llab-quvvatlash\n"
                "‚Ä¢ Qulay interfeys\n"
                "‚Ä¢ Veb-ilova bilan integratsiya",
        "back_to_menu": "üîô Menyuga qaytish",
        "messenger_title": "üí¨ **Actogram Messenjeri**\n\nShaxsiy messenjeringizni oching:",
        "web_app_title": "üåê **Actogram Veb-ilovasi**\n\nQo'shimcha funksiyalar bilan to'liq versiya:"
    }
}

# üóÇ –ü–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ª—É—á—à–µ –ë–î)
user_lang = {}

# üìå /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    lang = user_lang.get(chat_id, "ru")

    keyboard = [
        [InlineKeyboardButton("üí¨ " + LANGUAGES[lang]["site"], web_app=WebAppInfo(url=WEBAPP_URL))],
        [InlineKeyboardButton("üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", url=WEBAPP_URL)],
        [InlineKeyboardButton("‚ùì " + LANGUAGES[lang]["help"], callback_data="help")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")],
        [InlineKeyboardButton("üåç Language / Til", callback_data="lang")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(LANGUAGES[lang]["start"], reply_markup=reply_markup, parse_mode='Markdown')

# üìå /menu command
async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    lang = user_lang.get(chat_id, "ru")

    keyboard = [
        [InlineKeyboardButton("üí¨ " + LANGUAGES[lang]["site"], web_app=WebAppInfo(url=WEBAPP_URL))],
        [InlineKeyboardButton("üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", url=WEBAPP_URL)],
        [InlineKeyboardButton("‚ùì " + LANGUAGES[lang]["help"], callback_data="help")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")],
        [InlineKeyboardButton("üåç Language / Til", callback_data="lang")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("üìã **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**" if lang == "ru" else "üìã **Asosiy menyu**", 
                                   reply_markup=reply_markup, parse_mode='Markdown')

# üìå /help command
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    lang = user_lang.get(chat_id, "ru")
    
    keyboard = [[InlineKeyboardButton(LANGUAGES[lang]["back_to_menu"], callback_data="menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(LANGUAGES[lang]["help_text"], reply_markup=reply_markup, parse_mode='Markdown')

# üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.message.chat.id
    lang = user_lang.get(chat_id, "ru")

    await query.answer()

    if query.data == "lang":
        keyboard = [
            [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_ru")],
            [InlineKeyboardButton("üá∫üáø O'zbek", callback_data="set_uz")],
            [InlineKeyboardButton(LANGUAGES[lang]["back_to_menu"], callback_data="menu")]
        ]
        await query.edit_message_text(
            text=LANGUAGES[lang]["choose_lang"],
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    elif query.data == "help":
        keyboard = [[InlineKeyboardButton(LANGUAGES[lang]["back_to_menu"], callback_data="menu")]]
        await query.edit_message_text(
            LANGUAGES[lang]["help_text"],
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    elif query.data == "about":
        keyboard = [[InlineKeyboardButton(LANGUAGES[lang]["back_to_menu"], callback_data="menu")]]
        await query.edit_message_text(
            LANGUAGES[lang]["about"],
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    elif query.data == "menu":
        keyboard = [
            [InlineKeyboardButton("üí¨ " + LANGUAGES[lang]["site"], web_app=WebAppInfo(url=WEBAPP_URL))],
            [InlineKeyboardButton("üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", url=WEBAPP_URL)],
            [InlineKeyboardButton("‚ùì " + LANGUAGES[lang]["help"], callback_data="help")],
            [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")],
            [InlineKeyboardButton("üåç Language / Til", callback_data="lang")]
        ]
        await query.edit_message_text(
            "üìã **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**" if lang == "ru" else "üìã **Asosiy menyu**",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    elif query.data.startswith("set_"):
        new_lang = query.data.split("_")[1]
        user_lang[chat_id] = new_lang
        keyboard = [[InlineKeyboardButton(LANGUAGES[new_lang]["back_to_menu"], callback_data="menu")]]
        await query.edit_message_text(
            LANGUAGES[new_lang]["lang_changed"],
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

# üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    lang = user_lang.get(chat_id, "ru")
    
    # –ö—Ä–∞—Å–∏–≤–æ–µ –º–µ–Ω—é –ø—Ä–∏ –ª—é–±–æ–º —Ç–µ–∫—Å—Ç–µ
    keyboard = [
        [InlineKeyboardButton("üí¨ " + LANGUAGES[lang]["site"], web_app=WebAppInfo(url=WEBAPP_URL))],
        [InlineKeyboardButton("üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", url=WEBAPP_URL)],
        [InlineKeyboardButton("‚ùì " + LANGUAGES[lang]["help"], callback_data="help")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")],
        [InlineKeyboardButton("üåç Language / Til", callback_data="lang")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üìã **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**" if lang == "ru" else "üìã **Asosiy menyu**",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# üöÄ –ó–∞–ø—É—Å–∫
def main():
    # –ü–æ–¥–Ω–∏–º–∞–µ–º HTTP health-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render/UptimeRobot
    threading.Thread(target=_run_health_server, daemon=True).start()

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
    app = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("menu", menu_command))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        logger.error("Exception while handling an update:", exc_info=context.error)
    
    app.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (polling)
    try:
        logger.info("üöÄ Starting Actogram Bot...")
        app.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
        raise

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Fatal error: {e}")
